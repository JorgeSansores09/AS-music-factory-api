<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="artists-impl-test-suite.xml" />
	<global-property doc:name="Global Property" doc:id="a5681e1e-3117-4d29-9734-8d145dc9a383" name="test" value="local" />
	<configuration-properties doc:name="Configuration properties" doc:id="e6244506-672e-4453-908a-6f2c86631ce2" file="properties/${test}.properties" />
	<munit:test name="sr-get-artist-info-test" doc:id="bc19e2bb-957c-4e75-97c9-ecc9d24c073a" description="Test" ignore="true">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Get Artist HTTP Request" doc:id="f5aeb5ab-7bc3-4ac0-a563-47985d170c6f" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Get Artist Bio" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[readUrl("classpath://examples/lastFmResponseValid.json","application/json")]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="72e6fba9-c51c-462d-84d8-9dc5672d28c9" >
				<munit:variables >
					<munit:variable key="lastFmProperties" value="#[{method: p('last.fm.method'), apiKey: p('last.fm.api.key'), format: p('last.fm.format'), artist: 'The Beatles' }]" mediaType="application/java" />
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>

			</munit:set-event>
			<flow-ref doc:name="sr-get-artist-info" doc:id="a6bf744e-abdf-461d-99cb-71fa3d03173f" name="sr-get-artist-info"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call doc:name="Verify call" doc:id="55e3d2af-33ab-4c7c-9262-3bccdc549ab2" processor="http:request" times="#[1]">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Get Artist Bio" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2e587f2a-1dfd-46f3-85e5-9e94885214cc" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="last-fm-http-config" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/${last.fm.version}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-equals doc:name="Assert statusCode is 201" doc:id="edbcce7c-871d-494f-a0d1-b5c242b28311" actual="#[payload.statusCode]" expected="201" message="statusCode is 201"/>
			<munit-tools:assert-that doc:name="Assert that bioUrl found" doc:id="7a84251e-1ff2-4449-a63b-6d4f591891a7" expression="#[payload.bioUrl]" is='#[MunitTools::startsWith("https://")]' message="bioUrl failure"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-get-artists-test" doc:id="61ab1b66-e473-49e3-a4c1-8b95522e34fb" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="54992df7-bedb-458c-b70f-0f53b9a0b6b0" processor="db:select">
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;[{&#10;	ARTIST_ID: 2,&#10;	GROUP_NM: "MUnit Test",&#10;	FIRST_NM: "John",&#10;	LAST_NM: "Lennon",&#10;	BIRTH_DATE: "1940-01-01",&#10;	DEATH_DATE: "1980-11-01"&#10;}]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="groupName queryParam" doc:id="90585b4a-08e7-498e-bbe2-dc69d3737f48" >
				<munit:attributes value='#[{queryParams: {"groupName":"MUnit Test"}}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="impl-get-artists" doc:id="057caf08-82f5-49eb-8773-9a6b558a3bf1" name="impl-get-artists"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="6c8e7e6f-b7db-4960-acec-9356407864d3" message="NOT null" expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
			<munit-tools:assert-that doc:name="Assert that Artist firstName" doc:id="090dc890-fc16-4457-8cd9-869a820c2c8c" message="NOT John" expression="#[payload.artists[0].firstName as String]" is="#[MunitTools::startsWith('John')]"/>
			<munit-tools:assert-that doc:name="Assert that Artist lastName" doc:id="7450bdb2-1072-4813-85c7-43312bd7939e" message="NOT Lennon" expression="#[payload.artists[0].firstName as String]" is="#[MunitTools::startsWith('Lennon')]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-add-artists-test" doc:id="ef465937-944c-403e-b1fb-33aad7be76a0" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when flow-ref" doc:id="ff41d34a-2326-4a9e-80ff-ba4d349114d6" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6b8b5731-9a6f-4940-9f59-f01f351e5425" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="getArtistResponse" value="#[{&quot;statusCode&quot;: &quot;200&quot;, &quot;message&quot;: &quot;SUCCESS&quot;, &quot;searchCriteria&quot;: &quot;[lastName: 'Hickman', firstName: 'Johnny', groupName: 'Telegraph Canyon', birthDate: '1988-01-29', ]&quot;, &quot;artists&quot;: []}]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when insert artists" doc:id="abb2f299-5d12-48f1-a8c7-38f63ab512bf" processor="db:insert"/>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Post Artist Array" doc:id="8d125019-3c38-482e-a971-d55e3653d28d" >
				<munit:payload value='#[{&#10;  "artists": [&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Hickman",&#10;      "firstName": "Jill",&#10;      "dateOfBirth": "1988-01-29"&#10;    },&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Harrison",&#10;      "firstName": "Ted",&#10;      "mi": "B",&#10;      "dateOfBirth": "1982-03-21",&#10;"dateOfDeath": "2019-01-15"&#10;    }&#10;  ]&#10;}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="impl-add-artists" doc:id="477fe0c9-7985-429b-b0bc-3c8da75cadc3" name="impl-add-artists"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="dd334b3e-1bc8-4f46-ad8a-a58d4d491220" is="#[MunitTools::notNullValue()]" message="NOT null" expression="#[payload]"/>
			<munit-tools:assert-that doc:name="Assert that added = 2" doc:id="f7bfecce-9018-4911-a903-3ecdf7a77701" is="#[MunitTools::equalTo(2)]" message="added = 2" expression="#[sizeOf(payload.results.addedArtists)]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="artists-impl-add-artists-duplicates-test" doc:id="8b3a8c19-fc12-4774-b7f3-0ee6aabf1e5f" description="Test" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when flow-ref" doc:id="4f8cdb9d-052f-4ecd-a427-81fde7934d80" processor="sub-flow">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d9973e15-e99a-4702-8234-18865f4fabb0" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="getArtistResponse" value="#[{&quot;statusCode&quot;: &quot;200&quot;, &quot;message&quot;: &quot;SUCCESS&quot;, &quot;searchCriteria&quot;: &quot;[lastName: 'Hickman', firstName: 'Johnny', groupName: 'Telegraph Canyon', birthDate: '1988-01-29', ]&quot;, &quot;artists&quot;: [{&quot;artistId&quot;: 4,&quot;groupName&quot;: &quot;Telegraph Canyon&quot;,&quot;lastName&quot;: &quot;Hickman&quot;,&quot;firstName&quot;: &quot;Johnny&quot;,&quot;mi&quot;: &quot;&quot;,&quot;dateOfBirth&quot;: &quot;1988-01-29&quot;,&quot;dateOfDeath&quot;: &quot;&quot;}]}]" mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when insert artists" doc:id="037397e5-dbab-4eab-891a-ba9b0026ffa8" processor="db:insert" />
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Post Artist Array" doc:id="b9eb70ec-4121-408c-846e-0b5fbddef4dc" >
				<munit:payload value='#[{&#10;  "artists": [&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Hickman",&#10;      "firstName": "Jill",&#10;      "dateOfBirth": "1988-01-29"&#10;    },&#10;    {&#10;      "groupName": "Telegraph Canyon",&#10;      "lastName": "Harrison",&#10;      "firstName": "Ted",&#10;      "mi": "B",&#10;      "dateOfBirth": "1982-03-21",&#10;"dateOfDeath": "2019-01-15"&#10;    }&#10;  ]&#10;}]' />
				<munit:variables >
					<munit:variable key="headerAttributes" value="#[{correlationId: '12345', clientId: '12345', clientSecret: '12345'}]" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="impl-add-artists" doc:id="4007448c-deee-4c56-8ce0-2aee2984a29c" name="impl-add-artists" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that NOT null" doc:id="a58472a7-c49e-4852-a664-9dcf7ea400ae" message="NOT null" expression="#[payload]" is="#[MunitTools::notNullValue()]" />
			<munit-tools:assert-that doc:name="Assert that duplicates = " doc:id="6257bcf9-bd76-4ef9-8be4-487e407e2b6f" message="duplicates = 2" expression="#[sizeOf(payload.results.duplicatedArtists)]" is="#[MunitTools::equalTo(2)]" />
		</munit:validation>
	</munit:test>



</mule>